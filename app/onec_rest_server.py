import logging
import os
from typing import Any, Optional
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
import uvicorn

from api_client import OneCApiClient

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class AskAIRequest(BaseModel):
    question: str
    programming_language: Optional[str] = ""
    create_new_session: bool = False


class ExplainSyntaxRequest(BaseModel):
    syntax_element: str
    context: Optional[str] = ""


class CheckCodeRequest(BaseModel):
    code: str
    check_type: Optional[str] = "syntax"


class ResponseModel(BaseModel):
    result: str
    error: Optional[str] = None


class OneCRestServer:
    """REST-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –≤—ã–∑–æ–≤–∞ –º–µ—Ç–æ–¥–æ–≤ 1–°.ai –±–µ–∑ MCP."""

    def __init__(self):
        self.api_client: Optional[OneCApiClient] = None

    def _sanitize_text(self, text: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö Unicode-—Å–∏–º–≤–æ–ª–æ–≤."""
        if not text:
            return text
        import unicodedata
        text = unicodedata.normalize('NFKC', text)
        cleaned = ''.join(
            char for char in text
            if unicodedata.category(char) not in ['Cc', 'Cf'] or char in ['\n', '\r', '\t']
        )
        return cleaned

    async def _initialize_client(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API-–∫–ª–∏–µ–Ω—Ç–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ."""
        if self.api_client is None:
            try:
                self.api_client = OneCApiClient()
            except Exception as e:
                raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {str(e)}")

    async def ask_1c_ai(self, request: AskAIRequest) -> ResponseModel:
        await self._initialize_client()

        if not request.question.strip():
            return ResponseModel(result="", error="–í–æ–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")

        conversation_id = await self.api_client.get_or_create_session(
            create_new=request.create_new_session,
            programming_language=request.programming_language or None
        )

        answer = await self.api_client.send_message(conversation_id, request.question)
        clean_answer = self._sanitize_text(answer)

        return ResponseModel(result=f"–û—Ç–≤–µ—Ç –æ—Ç 1–°.ai:\n\n{clean_answer}\n\n–°–µ—Å—Å–∏—è: {conversation_id}")

    async def explain_1c_syntax(self, request: ExplainSyntaxRequest) -> ResponseModel:
        await self._initialize_client()

        if not request.syntax_element.strip():
            return ResponseModel(result="", error="–≠–ª–µ–º–µ–Ω—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")

        question = f"–û–±—ä—è—Å–Ω–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {request.syntax_element}"
        if request.context:
            question += f" –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ: {request.context}"

        conversation_id = await self.api_client.get_or_create_session()
        answer = await self.api_client.send_message(conversation_id, question)
        clean_answer = self._sanitize_text(answer)

        return ResponseModel(result=f"–û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ '{request.syntax_element}':\n\n{clean_answer}")

    async def check_1c_code(self, request: CheckCodeRequest) -> ResponseModel:
        await self._initialize_client()

        if not request.code.strip():
            return ResponseModel(result="", error="–ö–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")

        check_types = {
            "syntax": "—Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏",
            "logic": "–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã",
            "performance": "–ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"
        }
        check_desc = check_types.get(request.check_type.lower(), "–æ—à–∏–±–∫–∏")

        question = f"–ü—Ä–æ–≤–µ—Ä—å —ç—Ç–æ—Ç –∫–æ–¥ 1–° –Ω–∞ {check_desc} –∏ –¥–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n\n```1c\n{request.code}\n```"

        conversation_id = await self.api_client.get_or_create_session()
        answer = await self.api_client.send_message(conversation_id, question)
        clean_answer = self._sanitize_text(answer)

        return ResponseModel(result=f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –Ω–∞ {check_desc}:\n\n{clean_answer}")


# --- FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ---
app = FastAPI(
    title="1–°.ai REST API",
    description="REST-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ 1–°.ai: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞, –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –∏ AI-–≤–æ–ø—Ä–æ—Å—ã.",
    version="1.0.0"
)

server = OneCRestServer()


@app.post("/ask-ai", response_model=ResponseModel)
async def api_ask_ai(request: AskAIRequest):
    try:
        return await server.ask_1c_ai(request)
    except HTTPException as e:
        raise e
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ /ask-ai: {str(e)}")
        raise HTTPException(status_code=500, detail=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")


@app.post("/explain-syntax", response_model=ResponseModel)
async def api_explain_syntax(request: ExplainSyntaxRequest):
    try:
        return await server.explain_1c_syntax(request)
    except HTTPException as e:
        raise e
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ /explain-syntax: {str(e)}")
        raise HTTPException(status_code=500, detail=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")


@app.post("/check-code", response_model=ResponseModel)
async def api_check_code(request: CheckCodeRequest):
    try:
        return await server.check_1c_code(request)
    except HTTPException as e:
        raise e
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ /check-code: {str(e)}")
        raise HTTPException(status_code=500, detail=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")


@app.get("/health")
async def health_check():
    return {"status": "ok", "services": ["1C.ai API"]}


@app.get("/")
async def root():
    return {
        "message": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ 1–°.ai REST API",
        "endpoints": {
            "/ask-ai": "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ò–ò",
            "/explain-syntax": "–û–±—ä—è—Å–Ω–∏—Ç—å —Å–∏–Ω—Ç–∞–∫—Å–∏—Å 1–°",
            "/check-code": "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–¥ –Ω–∞ –æ—à–∏–±–∫–∏",
            "/health": "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞",
            "/docs": "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è Swagger UI"
        }
    }


if __name__ == "__main__":
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ 1–°.ai REST API —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ http://localhost:8000")
    uvicorn.run(
        "onec_rest_server:app",
        host="0.0.0.0",
        port=8000,
        reload=False,
        log_level="info"
    )
